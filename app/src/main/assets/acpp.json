[
  {
    "question": "What is C++?",
    "answer": "C++ is a general-purpose programming language that supports object-oriented, procedural, and generic programming paradigms."
  },
  {
    "question": "What are the key features of C++?",
    "answer": "Key features include object-oriented programming, encapsulation, polymorphism, inheritance, abstraction, and strong type checking."
  },
  {
    "question": "What is the difference between C and C++?",
    "answer": "C is a procedural language, while C++ supports both procedural and object-oriented programming."
  },
  {
    "question": "What is an object in C++?",
    "answer": "An object is an instance of a class that contains data members and member functions."
  },
  {
    "question": "What is a class in C++?",
    "answer": "A class is a blueprint for creating objects, defining data members and member functions."
  },
  {
    "question": "What is a constructor in C++?",
    "answer": "A constructor is a special function that initializes an object when it is created."
  },
  {
    "question": "What is a destructor in C++?",
    "answer": "A destructor is a special function that is called when an object is destroyed, used to free resources."
  },
  {
    "question": "What is the difference between struct and class in C++?",
    "answer": "The main difference is that members of a struct are public by default, while members of a class are private by default."
  },
  {
    "question": "What is polymorphism in C++?",
    "answer": "Polymorphism allows functions or objects to behave differently based on the context, achieved using function overloading and overriding."
  },
  {
    "question": "What is encapsulation in C++?",
    "answer": "Encapsulation is the bundling of data and methods into a single unit (class) to protect data from direct access."
  },
  {
    "question": "What is inheritance in C++?",
    "answer": "Inheritance allows a class to acquire the properties and behaviors of another class, promoting code reusability."
  },
  {
    "question": "What is function overloading?",
    "answer": "Function overloading allows multiple functions with the same name but different parameter lists."
  },
  {
    "question": "What is operator overloading?",
    "answer": "Operator overloading allows operators to be redefined for user-defined types."
  },
  {
    "question": "What is the difference between function overloading and function overriding?",
    "answer": "Overloading occurs in the same class with different parameters, while overriding occurs in a derived class with the same function signature."
  },
  {
    "question": "What are virtual functions?",
    "answer": "Virtual functions allow runtime polymorphism, enabling function overriding in derived classes."
  },
  {
    "question": "What is a pure virtual function?",
    "answer": "A pure virtual function is a function that must be overridden in derived classes, making the class abstract."
  },
  {
    "question": "What is an abstract class?",
    "answer": "An abstract class is a class that cannot be instantiated and contains at least one pure virtual function."
  },
  {
    "question": "What is multiple inheritance?",
    "answer": "Multiple inheritance allows a class to inherit from more than one base class."
  },
  {
    "question": "What is a copy constructor?",
    "answer": "A copy constructor initializes a new object as a copy of an existing object."
  },
  {
    "question": "What is a move constructor?",
    "answer": "A move constructor transfers ownership of resources from a temporary object to a new object."
  },
  {
    "question": "What is the difference between shallow copy and deep copy?",
    "answer": "Shallow copy copies only the pointers, while deep copy creates a new copy of the allocated memory."
  },
  {
    "question": "What is the 'this' pointer in C++?",
    "answer": "The 'this' pointer refers to the current object instance within a class."
  },
  {
    "question": "What is the difference between new and malloc?",
    "answer": "'new' is an operator in C++ that calls the constructor, while 'malloc' is a C function that does not invoke the constructor."
  },
  {
    "question": "What is RAII in C++?",
    "answer": "RAII (Resource Acquisition Is Initialization) ensures resource deallocation using object destructors."
  },
  {
    "question": "What is the Standard Template Library (STL)?",
    "answer": "STL is a library in C++ that provides generic classes and functions, including containers, algorithms, and iterators."
  },
  {
    "question": "What are iterators in C++?",
    "answer": "Iterators are objects that allow traversal of elements in a container."
  },
  {
    "question": "What are the types of STL containers?",
    "answer": "Containers in STL include sequence containers (vector, list, deque), associative containers (set, map), and unordered containers."
  },
  {
    "question": "What is the difference between a vector and a list in C++?",
    "answer": "Vector provides dynamic array functionality, while list implements a doubly linked list for fast insertions and deletions."
  },
  {
    "question": "What is a lambda function in C++?",
    "answer": "A lambda function is an anonymous function used for short inline operations."
  },
  {
    "question": "What is the role of 'auto' keyword in C++?",
    "answer": "'auto' allows automatic type deduction based on the assigned value."
  },
  {
    "question": "What is the difference between static and global variables?",
    "answer": "Static variables retain their value across function calls, while global variables are accessible from any part of the program."
  },
  {
    "question": "What is a namespace in C++?",
    "answer": "A namespace is used to avoid naming conflicts by grouping related identifiers."
  },
  {
    "question": "What is the role of the 'friend' function in C++?",
    "answer": "A friend function allows access to private and protected members of a class without being a member."
  },
  {
    "question": "What is exception handling in C++?",
    "answer": "Exception handling manages runtime errors using try, catch, and throw blocks."
  },
  {
    "question": "What is the role of 'nullptr' in C++?",
    "answer": "'nullptr' is a keyword introduced in C++11 that represents a null pointer."
  },
  {
    "question": "What is a smart pointer in C++?",
    "answer": "Smart pointers manage memory automatically and include unique_ptr, shared_ptr, and weak_ptr."
  },
  {
    "question": "What is a memory leak in C++?",
    "answer": "A memory leak occurs when dynamically allocated memory is not deallocated properly."
  },
  {
    "question": "What is the difference between stack and heap memory?",
    "answer": "Stack memory is used for static memory allocation, while heap memory is used for dynamic allocation."
  },
  {
    "question": "What is the difference between exit() and return?",
    "answer": "'exit()' terminates the program immediately, while 'return' exits only from the current function."
  },
  {
    "question": "What is the purpose of 'volatile' keyword?",
    "answer": "'volatile' tells the compiler that a variable may change at any time and prevents optimization."
  },
  {
    "question": "What is a mutex in C++?",
    "answer": "A mutex is a synchronization primitive used to prevent multiple threads from accessing shared resources simultaneously."
  },
  {
    "question": "What is a condition variable in C++?",
    "answer": "A condition variable is used for thread synchronization, allowing threads to wait for certain conditions before proceeding."
  },
  {
    "question": "What is std::async in C++?",
    "answer": "std::async is used to run functions asynchronously in a separate thread."
  },
  {
    "question": "What is the role of std::move in C++?",
    "answer": "std::move transfers ownership of resources to enable move semantics, reducing unnecessary copying."
  }
]
